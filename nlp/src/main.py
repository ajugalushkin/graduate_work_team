from natasha import (
    Segmenter,
    MorphVocab,
    NewsEmbedding,
    NewsNERTagger,
    NewsMorphTagger,
    Doc,
)

from typing import Dict
import re

# NLP –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
segmenter = Segmenter()
morph_vocab = MorphVocab()
emb = NewsEmbedding()
morph_tagger = NewsMorphTagger(emb)
ner_tagger = NewsNERTagger(emb)

# –°–ª–æ–≤–∞—Ä—å –∂–∞–Ω—Ä–æ–≤ ‚Äî –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å
GENRES = {
    "–±–æ–µ–≤–∏–∫",
    "–∫–æ–º–µ–¥–∏—è",
    "–¥—Ä–∞–º–∞",
    "—Ç—Ä–∏–ª–ª–µ—Ä",
    "—É–∂–∞—Å—ã",
    "–º–µ–ª–æ–¥—Ä–∞–º–∞",
    "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
    "—Ñ—ç–Ω—Ç–µ–∑–∏",
    "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è",
}


def normalize_genre(word: str) -> str | None:
    for genre in GENRES:
        if word.startswith(genre[:4]):  # –≥—Ä—É–±–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
            return genre
    return None


def extract_info(query: str) -> Dict:
    doc = Doc(query)
    doc.segment(segmenter)
    doc.tag_morph(morph_tagger)
    doc.tag_ner(ner_tagger)

    result = {}

    # üé≠ –ê–∫—Ç—ë—Ä—ã / –†–µ–∂–∏—Å—Å—ë—Ä—ã ‚Äî –ª—é–±—ã–µ –ò–º–µ–Ω–∞
    actors = []
    for span in doc.spans:
        if span.type == "PER":
            span.normalize(morph_vocab)
            actors.append(span.normal)
    if actors:
        result["actors"] = actors

    # üìÖ –ì–æ–¥
    years = re.findall(r"(19|20)\d{2}", query)
    if years:
        result["year"] = int(years[0])

    # üé¨ –ñ–∞–Ω—Ä—ã (–ø–æ —Å–ª–æ–≤–∞–º)
    for token in doc.tokens:
        normal = token.text.lower()
        genre = normalize_genre(normal)
        if genre:
            result["genre"] = genre
            break

    return result


if __name__ == "__main__":
    test_queries = [
        "–ü–æ–∫–∞–∂–∏ –º–Ω–µ –±–æ–µ–≤–∏–∫–∏ 2020 –≥–æ–¥–∞ —Å –¢–æ–º–æ–º –ö—Ä—É–∑–æ–º",
        "–ù–∞–π–¥–∏ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫—É —Å –ê—Ä–Ω–æ–ª—å–¥–æ–º –®–≤–∞—Ä—Ü–µ–Ω–µ–≥–≥–µ—Ä–æ–º",
        "–§–∏–ª—å–º—ã —É–∂–∞—Å–æ–≤ 2019 –≥–æ–¥–∞",
        "–ö–æ–º–µ–¥–∏–∏ —Å –î–∂–∏–º–æ–º –ö–µ—Ä—Ä–∏ –∏ –ê–¥–∞–º–æ–º –°—ç–Ω–¥–ª–µ—Ä–æ–º",
        "–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ–≥–æ –∏–∑ –∫–æ–º–µ–¥–∏–π?"
    ]

    for query in test_queries:
        print(f"–ó–∞–ø—Ä–æ—Å: {query}")
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç:", extract_info(query))
        print("-" * 40)
