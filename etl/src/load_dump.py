import os
import json
import time
import requests
from elasticsearch import Elasticsearch
from elastic_schema import MOVIE_INDEX_SCHEMA

print("‚úÖ load_dump.py: –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω")

ELASTIC_URL = os.getenv("ELASTIC_URL", "http://elasticsearch:9200")
INDEX_NAME = os.getenv("INDEX_NAME", "movies")
DUMP_FILE = "/data/movies.json"  # üî• –í–∞–∂–Ω–æ: —Ñ–∞–π–ª –º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –≤ /data

print(f"üåç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {ELASTIC_URL}")
print(f"üìÇ –§–∞–π–ª –¥–∞–º–ø–∞: {DUMP_FILE}")


def wait_for_es():
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ Elasticsearch...")
    for _ in range(60):  # –º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç
        try:
            response = requests.get(ELASTIC_URL, timeout=5)
            if response.status_code == 200:
                print("‚úÖ Elasticsearch –¥–æ—Å—Ç—É–ø–µ–Ω")
                return
        except requests.ConnectionError:
            print("üí§ –ù–µ –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ES, –∂–¥—É...")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

        time.sleep(10)

    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Elasticsearch")
    exit(1)


def create_index(es):
    try:
        if es.indices.exists(index=INDEX_NAME):
            print(f"‚ÑπÔ∏è –ò–Ω–¥–µ–∫—Å '{INDEX_NAME}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return

        es.indices.create(index=INDEX_NAME, body=MOVIE_INDEX_SCHEMA)
        print(f"‚úÖ –ò–Ω–¥–µ–∫—Å '{INDEX_NAME}' —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")
        exit(1)


def load_dump(es):
    if not os.path.exists(DUMP_FILE):
        print(f"‚ùå –§–∞–π–ª –¥–∞–º–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {DUMP_FILE}")
        print(f"üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ / {os.listdir('/data')}")
        exit(1)

    try:
        with open(DUMP_FILE, "r", encoding="utf-8") as f:
            movies = json.load(f)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(movies)} —Ñ–∏–ª—å–º–æ–≤ –∏–∑ –¥–∞–º–ø–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
        exit(1)

    actions = []
    for movie in movies:
        action = {"index": {"_index": INDEX_NAME, "_id": movie["id"]}}
        actions.append(action)
        actions.append(movie)

    try:
        response = es.bulk(operations=actions)
        if response.get("errors"):
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∏ –≤ bulk: {response['items']}")
        else:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(movies)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Elastic: {e}")
        exit(1)


if __name__ == "__main__":
    wait_for_es()
    es = Elasticsearch(ELASTIC_URL)
    create_index(es)
    load_dump(es)
    print("üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    time.sleep(2)